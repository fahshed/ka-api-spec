openapi: 3.0.3

info:
  title: KA API
  description: >-
    API spec for Kemon Achen API v1
  contact:
    email: 1605077@ugrad.cse.buet.ac.bd
    name: Kemon Achen
  version: 1.0.0

servers:
  - url: http://localhost:9000/api/v1
    description: DEVELOPMENT

tags:
  - name: user
    description: Operations about user
  - name: post
    description: Operations about post
  - name: community
    description: Operations about community
  - name: test
    description: Operations about test

paths:
  /user/regular/signup:
    post:
      tags:
        - user
      summary: Create a regular user
      description: Creates a regular user in the database with credentials
      operationId: signupRegularUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegularUserCredentials"
      responses:
        "200":
          $ref: "#/components/responses/OKAuthentication"
        default:
          $ref: "#/components/responses/BadRequest"

  /user/professional/signup:
    post:
      tags:
        - user
      summary: Create a professional user
      description: Creates a professional user in the database with credentials
      operationId: signupProfessionalUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfessionalUserCredentials"
      responses:
        "200":
          $ref: "#/components/responses/OKAuthentication"
        default:
          $ref: "#/components/responses/BadRequest"

  /user/login:
    post:
      tags:
        - user
      summary: Logs in a user
      description: Logs in a user(regular/professional) in the database with credentials
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginCredentials"
      responses:
        "200":
          $ref: "#/components/responses/OKAuthentication"
        default:
          $ref: "#/components/responses/BadRequest"

  /user/communities:
    get:
      tags:
        - user
      summary: Get communities of a user
      description: Get communities of a logged in user
      operationId: getCommunities
      responses:
        "200":
          $ref: "#/components/responses/OKCommunities"
        default:
          $ref: "#/components/responses/BadRequest"

  /user/communities/suggested:
    get:
      tags:
        - user
      summary: Get suggested communities of a user
      description: Get suggested communities of a logged in user
      operationId: getSuggestedCommunities
      responses:
        "200":
          $ref: "#/components/responses/OKCommunities"
        default:
          $ref: "#/components/responses/BadRequest"

  /user/{userId}/posts:
    get:
      tags:
        - user
      summary: Get posts by UserId
      description: Get Array of posts by UserId
      operationId: getPostsByUserId
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          $ref: "#/components/responses/OKUserPosts"
        default:
          $ref: "#/components/responses/BadRequest"

  /user/{userId}/comments:
    get:
      tags:
        - user
      summary: Get comments by UserId
      description: Get Array of comments by UserId
      operationId: getCommentsByUserId
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          $ref: "#/components/responses/OKUserComments"
        default:
          $ref: "#/components/responses/BadRequest"

  /user/community/{communityId}/join:
    get:
      tags:
        - user
      summary: Join a user to a community
      description: Join a user to a community given the community id
      operationId: joinCommunity
      parameters:
        - $ref: "#/components/parameters/communityId"
      responses:
        "200":
          $ref: "#/components/responses/OKJoinCommunity"
        default:
          $ref: "#/components/responses/BadRequest"

  /user/savedPosts:
    get:
      tags:
        - user
      summary: Get saved posts of an user
      description: Get the saved posts of a logged in user
      operationId: getSavedPosts
      responses:
        "200":
          $ref: "#/components/responses/OKSavedPosts"
        default:
          $ref: "#/components/responses/BadRequest"

  /post/{postId}/save:
    get:
      tags:
        - post
      summary: Save a post by user
      description: Save a post by a logged-in user
      operationId: savePost
      parameters:
        - $ref: "#/components/parameters/postId"
        - $ref: "#/components/parameters/saveOptions"
      responses:
        "200":
          $ref: "#/components/responses/OKSavePost"
        default:
          $ref: "#/components/responses/BadRequest"

  /post/{postId}/like:
    get:
      tags:
        - post
      summary: Like a post by user
      description: Like a post by a logged-in user
      operationId: likePost
      parameters:
        - $ref: "#/components/parameters/postId"
        - $ref: "#/components/parameters/likeOptions"
      responses:
        "200":
          $ref: "#/components/responses/OKLikePost"
        default:
          $ref: "#/components/responses/BadRequest"

  /post/create:
    post:
      tags:
        - post
      summary: Create a post
      description: Creates a post by a logged-in user
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        "200":
          $ref: "#/components/responses/OkPostCreated"
        default:
          $ref: "#/components/responses/BadRequest"

  /post/{postId}/comment/create:
    post:
      tags:
        - post
      summary: Create a comment
      description: Creates a comment of a post by a logged-in user
      operationId: createComment
      parameters:
        - $ref: "#/components/parameters/postId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "200":
          $ref: "#/components/responses/OKComment"
        default:
          $ref: "#/components/responses/BadRequest"

  /post/{postId}/comment/{commentId}/reply/create:
    post:
      tags:
        - post
      summary: Create a reply
      description: Creates a reply of a comment by a logged-in user
      operationId: createReply
      parameters:
        - $ref: "#/components/parameters/postId"
        - $ref: "#/components/parameters/commentId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "200":
          $ref: "#/components/responses/OKComment"
        default:
          $ref: "#/components/responses/BadRequest"

  /post/{postId}/comment/{commentId}/replies:
    get:
      tags:
        - post
      summary: Get replies of a comment
      description: Gets all the replies of a comment of a post by a logged-in user
      operationId: getRepliesofComment
      parameters:
        - $ref: "#/components/parameters/postId"
        - $ref: "#/components/parameters/commentId"
      responses:
        "200":
          $ref: "#/components/responses/OKReplies"
        default:
          $ref: "#/components/responses/BadRequest"

  /post/feed:
    get:
      tags:
        - post
      summary: Get feed of an user
      description: Get the main feed of an user sorted by query parameters
      operationId: getFeed
      parameters:
        - $ref: "#/components/parameters/feedSortedBy"
      responses:
        "200":
          $ref: "#/components/responses/OKFeed"
        default:
          $ref: "#/components/responses/BadRequest"

  /post/{postId}:
    get:
      tags:
        - post
      summary: Get post by Id
      description: Get post by id and comments sorted by query parameters
      operationId: getPostById
      parameters:
        - $ref: "#/components/parameters/postId"
        - $ref: "#/components/parameters/commentsSortedBy"
      responses:
        "200":
          $ref: "#/components/responses/OKPost"
        default:
          $ref: "#/components/responses/BadRequest"

  /community/{communityId}/information:
    get:
      tags:
        - community
      summary: Get community information
      description: Gets information about a community
      operationId: getCommunityInfo
      parameters:
        - $ref: "#/components/parameters/communityId"
      responses:
        "200":
          $ref: "#/components/responses/OKCommunityInfo"
        default:
          $ref: "#/components/responses/BadRequest"

  /community/{communityId}/feed:
    get:
      tags:
        - community
      summary: Get feed of a community
      description: Get the feed of a community sorted by query parameters
      operationId: getCommunityFeed
      parameters:
        - $ref: "#/components/parameters/communityId"
        - $ref: "#/components/parameters/feedSortedBy"
      responses:
        "200":
          $ref: "#/components/responses/OKCommunityFeed"
        default:
          $ref: "#/components/responses/BadRequest"

  /community/{communityId}/about:
    get:
      tags:
        - community
      summary: Get detailed community information
      description: Gets detailed information about a community and the disease it is trying to tackle
      operationId: getCommunityAbout
      parameters:
        - $ref: "#/components/parameters/communityId"
      responses:
        "200":
          $ref: "#/components/responses/OKCommunityAbout"
        default:
          $ref: "#/components/responses/BadRequest"

  /test/create:
    post:
      tags:
        - test
      summary: Create a Test
      description: N/A
      operationId: createTest
      requestBody:
        $ref: "#/components/responses/OKCreateTest"
      responses:
        "200":
          $ref: "#/components/responses/OKTest"
        default:
          $ref: "#/components/responses/BadRequest"

  /test/{testId}:
    get:
      tags:
        - test
      summary: Get a Test
      description: N/A
      operationId: getTestById
      parameters:
        - $ref: "#/components/parameters/testId"
      responses:
        "200":
          $ref: "#/components/responses/OKTest"
        default:
          $ref: "#/components/responses/BadRequest"

  /test/random:
    get:
      tags:
        - test
      summary: Get a random Test
      description: N/A
      operationId: getTestRandomly
      responses:
        "200":
          $ref: "#/components/responses/OKTest"
        default:
          $ref: "#/components/responses/BadRequest"

  /test/{testId}/submit:
    post:
      tags:
        - test
      summary: Submit a test
      description: N/A
      operationId: submitTest
      parameters:
        - $ref: "#/components/parameters/testId"
      requestBody:
        $ref: "#/components/responses/OKScore"
      responses:
        "200":
          $ref: "#/components/responses/OKSubmitTest"
        default:
          $ref: "#/components/responses/BadRequest"

  /test/advice/communities/suggested:
    get:
      tags:
        - test
      summary: Get suggested commmunities
      description: Get suggested commmunities based on test score
      operationId: getCommunitiesByScore
      responses:
        "200":
          $ref: "#/components/responses/OKCommunityInfo"
        default:
          $ref: "#/components/responses/BadRequest"

  /test/advice/create:
    post:
      tags:
        - test
      summary: Create an advice
      description: N/A
      operationId: createAdvice
      responses:
        "200":
          $ref: "#/components/responses/OKCreateAdvice"
        default:
          $ref: "#/components/responses/BadRequest"

components:
  schemas:
    Post:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        asPseudo:
          type: boolean
        tags:
          type: array
          items:
            type: string
        voteCount:
          type: number
        commentCount:
          type: number
        createdAt:
          type: string
          format: date-time
        community:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            image:
              type: string
        postedBy:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            image:
              type: string
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
        isLikedByCurrentUser:
          type: boolean

    Comment:
      type: object
      properties:
        _id:
          type: string
        content:
          type: string
        asPseudo:
          type: boolean
        voteCount:
          type: string
        replyCount:
          type: number
        createdAt:
          type: string
          format: date-time
        postedBy:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            avatar:
              type: string
            rank:
              type: number
        parentPost:
          type: object
          properties:
            _id:
              type: string
            title:
              type: string
        repliedTo:
          type: string

    RegularUserCredentials:
      type: object
      properties:
        role:
          type: string
        email:
          type: string
        password:
          type: string

    ProfessionalUserCredentials:
      type: object
      properties:
        role:
          type: string
        email:
          type: string
        password:
          type: string
        verified:
          type: boolean
        license:
          type: string
        licenseIssued:
          type: string
          format: date-time
        specializations:
          type: array
          items:
            type: string

    UserLoginCredentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    ErrorMessage:
      type: object
      properties:
        message:
          type: string

    AuthResponse:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        message:
          type: string
        jwt:
          type: string
        role:
          type: string
        image:
          type: string

    CommunityInfo:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        image:
          type: string
        members:
          type: number
        hasJoined:
          type: boolean
        tags:
          type: array
          items:
            type: string

    CommunityAbout:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        detailedDescription:
          type: string
        links:
          type: array
          items:
            $ref: "#/components/schemas/Links"
        images:
          type: array
          items:
            type: string
        symptoms:
          type: array
          items:
            type: string
        toDo:
          type: array
          items:
            type: string

    Links:
      type: object
      properties:
        link:
          type: string
        title:
          type: string

    CommunityList:
      type: array
      items:
        $ref: "#/components/schemas/CommunityListElement"

    CommunityListElement:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        image:
          type: string

    UserPosts:
      type: array
      items:
        $ref: "#/components/schemas/Post"

    UserComments:
      type: array
      items:
        $ref: "#/components/schemas/Comment"

    JoinCommunityMessage:
      type: object
      properties:
        message:
          type: string

    SavePostMessage:
      type: object
      properties:
        message:
          type: string

    LikePostMessage:
      type: object
      properties:
        message:
          type: string

    Replies:
      type: array
      items:
        $ref: "#/components/schemas/Comment"

    Feed:
      type: array
      items:
        $ref: "#/components/schemas/Post"

    CreateTest:
      type: object
      properties:
        name:
          type: string
        anxietyQuestions:
          type: array
          items:
            type: string
        depressionQuestions:
          type: array
          items:
            type: string
        stressQuestions:
          type: array
          items:
            type: string

    Test:
      allOf:
        - $ref: "#/components/schemas/CreateTest"
        - type: object
          required:
            - _id
          properties:
            _id:
              type: string

    CreateAdvice:
      type: object
      properties:
        testId:
          type: string
        disease:
          type: string
          enum:
            - anxiety
            - depression
            - stress
        messages:
          type: array
          items:
            type: string
        advice:
          type: array
          items:
            type: string
        range:
          type: object
          properties:
            min:
              type: number
            max:
              type: number

    SubmitTestResponse:
      type: object
      properties:
        _id:
          type: string
        anxietyAdvice:
          $ref: "#/components/schemas/CreateAdvice"
        depressionAdvice:
          $ref: "#/components/schemas/CreateAdvice"
        stressAdvice:
          $ref: "#/components/schemas/CreateAdvice"

    Score:
      type: object
      properties:
        anxiety:
          type: number
        depression:
          type: number
        stress:
          type: number

  parameters:
    postId:
      in: path
      name: postId
      required: true
      schema:
        type: string

    testId:
      in: path
      name: testId
      required: true
      schema:
        type: string

    communityId:
      in: path
      name: communityId
      required: true
      schema:
        type: string

    userId:
      in: path
      name: userId
      required: true
      schema:
        type: string

    commentsSortedBy:
      in: query
      name: commentsSortedBy
      schema:
        type: string
        enum: ["time", "votes", "professional"]

    likeOptions:
      in: query
      name: likeOptions
      required: true
      schema:
        type: string
        enum: ["like", "unlike"]

    saveOptions:
      in: query
      name: saveOptions
      schema:
        type: string
        enum: ["save", "unsave"]

    commentId:
      in: path
      name: commentId
      required: true
      schema:
        type: string

    feedSortedBy:
      in: query
      name: feedSortedBy
      schema:
        type: string
        enum: ["time", "votes", "professional", "commentCount"]

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"

    OKPost:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Post"

    OKAuthentication:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthResponse"

    OKCommunities:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CommunityList"

    OKUserPosts:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserPosts"

    OKUserComments:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserComments"

    OKJoinCommunity:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JoinCommunityMessage"

    OKSavePost:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SavePostMessage"

    OKLikePost:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LikePostMessage"

    OkPostCreated:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Post"

    OKComment:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Comment"

    OKReplies:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Replies"

    OKFeed:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Feed"

    OKSavedPosts:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Feed"

    OKCommunityInfo:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CommunityInfo"

    OKCommunityFeed:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Feed"

    OKCommunityAbout:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CommunityAbout"

    OKTest:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Test"

    OKSubmitTest:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SubmitTestResponse"

    OKCreateTest:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateTest"

    OKCreateAdvice:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateAdvice"

    OKScore:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Score"
