openapi: 3.0.3

info:
  title: KA API
  description: >-
    API spec for Kemon Achen API v1
  contact:
    email: 1605077@ugrad.cse.buet.ac.bd
    name: Kemon Achen
  version: 1.0.0

servers:
  - url: http://localhost:8000/api/v1
    description: DEVELOPMENT

tags:
  - name: user
    description: Operations about user
  - name: post
    description: Operations about post

paths:
  /post/{postId}:
    get:
      tags:
        - post
      summary: Get post by Id
      description: Get post by id and comments sorted by query parameters
      operationId: getPostById
      parameters:
        - $ref: "#/components/parameters/postId"
        - $ref: "#/components/parameters/commentsSortedBy"
      responses:
        "200":
          $ref: "#/components/responses/OKPost"
        default:
          $ref: "#/components/responses/BadRequest"

  /post/{postId}/save:
    get:
      tags:
        - post
      summary: Save a post by user
      description: Save a post by a logged-in user
      operationId: savePost
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        "200":
          $ref: "#/components/responses/OKSavePost"
        default:
          $ref: "#/components/responses/BadRequest"

  /post/{postId}/like:
    get:
      tags:
        - post
      summary: Save a post by user
      description: Save a post by a logged-in user
      operationId: likePost
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        "200":
          $ref: "#/components/responses/OKLikePost"
        default:
          $ref: "#/components/responses/BadRequest"

  /user/regular/signup:
    post:
      tags:
        - user
      summary: Create a regular user
      description: Creates a regular user in the database with credentials
      operationId: signupRegularUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegularUserCredentials"
      responses:
        "200":
          $ref: "#/components/responses/OKAuthentication"
        default:
          $ref: "#/components/responses/BadRequest"

  /user/professional/signup:
    post:
      tags:
        - user
      summary: Create a professional user
      description: Creates a professional user in the database with credentials
      operationId: signupProfessionalUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfessionalUserCredentials"
      responses:
        "200":
          $ref: "#/components/responses/OKAuthentication"
        default:
          $ref: "#/components/responses/BadRequest"

  /user/login:
    post:
      tags:
        - user
      summary: Logs in a user
      description: Logs in a user(regular/professional) in the database with credentials
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginCredentials"
      responses:
        "200":
          $ref: "#/components/responses/OKAuthentication"
        default:
          $ref: "#/components/responses/BadRequest"
  
  /user/communities:
    get:
      tags:
        - user
      summary: Get communities of a user
      description: Get communities of a logged in user
      operationId: getCommunities
      responses:
        "200":
          $ref: "#/components/responses/OKCommunities"
        default:
          $ref: "#/components/responses/BadRequest"

  /user/communities/suggested :
    get:
      tags:
        - user
      summary: Get suggested communities of a user
      description: Get suggested communities of a logged in user
      operationId: getSuggestedCommunities
      responses:
        "200":
          $ref: "#/components/responses/OKCommunities"
        default:
          $ref: "#/components/responses/BadRequest"

  /user/{userId}/posts:
    get:
      tags:
        - user
      summary: Get posts by UserId
      description: Get Array of posts by UserId
      operationId: getPostsByUserId
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          $ref: "#/components/responses/OKUserPosts"
        default:
          $ref: "#/components/responses/BadRequest"
  

  /user/{userId}/comments:
    get:
      tags:
        - user
      summary: Get comments by UserId
      description: Get Array of comments by UserId
      operationId: getCommentsByUserId
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          $ref: "#/components/responses/OKUserComments"
        default:
          $ref: "#/components/responses/BadRequest"

  /user/community/{communityId}/join:
    get:
      tags:
        - user
      summary: Join a user to a community
      description: Join a user to a community given the community id
      operationId: joinCommunity
      parameters:
        - $ref: "#/components/parameters/communityId"
      responses:
        "200":
          $ref: "#/components/responses/OKJoinCommunity"
        default:
          $ref: "#/components/responses/BadRequest"

  
components:
  schemas:
    Post:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        tags:
          type: array
          items:
            type: string
        voteCount:
          type: number
        commentCount:
          type: number
        createdAt:
          type: string
          format: date-time
        community:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            image:
              type: string
        postedBy:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
            image:
              type: string
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"

    Comment:
      type: object
      properties:
        _id:
          type: string
        content:
          type: string
        voteCount:
          type: string
        replyCount:
          type: number
        createdAt:
          type: string
          format: date-time
        postedBy:
          type: object
          properties:
            _id:
              type: string
            username:
              type: string
            avatar:
              type: string
            rank:
              type: number
        parentPost:
          type: object
          properties:
            _id:
              type: string
            title:
              type: string

    RegularUserCredentials:
      type: object
      properties:
        role:
          type: string
        email:
          type: string
        password:
          type: string
    
    ProfessionalUserCredentials:
      type: object
      properties:
        role:
          type: string
        email:
          type: string
        password:
          type: string
        verified:
          type: boolean
        license:
          type: string
        licenseIssued:
          type: string
          format: date-time
        specializations:
          type: array
          items:
            type: string
    
    UserLoginCredentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    ErrorMessage:
      type: object
      properties:
        message:
          type: string
    
    AuthResponse:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        message:
          type: string
        jwt:
          type: string
        role:
          type: string
        image:
          type: string
    
    CommunityList:
      type: array
      items:
        $ref: "#/components/schemas/CommunityListElement"

    CommunityListElement:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        image:
          type: string


    UserPosts:
      type: array
      items:
        $ref: "#/components/schemas/Post"
    
    UserComments:
      type: array
      items:
        $ref: "#/components/schemas/Comment"
    
    JoinCommunityMessage:
      type: object
      properties:
        message:
          type: string
    
    SavePostMessage:
      type: object
      properties:
        message:
          type: string
    
    LikePostMessage:
      type: object
      properties:
        message:
          type: string

  parameters:
    postId:
      in: path
      name: postId
      required: true
      schema:
        type: string
    
    communityId:
      in: path
      name: communityId
      required: true
      schema:
        type: string
    
    userId:
      in: path
      name: userId
      required: true
      schema:
        type: string

    commentsSortedBy:
      in: query
      name: commentsSortedBy
      schema:
        type: string
        enum: ["time", "votes", "professional"]

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    OKPost:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Post"
    OKAuthentication:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthResponse"
    OKCommunities:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CommunityList"
    OKUserPosts:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserPosts"
    OKUserComments:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserComments"
    OKJoinCommunity:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JoinCommunityMessage"
    OKSavePost:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SavePostMessage"
    OKLikePost:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LikePostMessage"